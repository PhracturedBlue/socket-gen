{{- $env := .Env }}
{{- $func := .Func }}
{{- $http_listen_address := index .ListenAddrs 0 }}
{{- $https_listen_address := .Func.IndexIfExists .ListenAddrs 1 "" }}
{{- $cert_dir := $func.MapIndex $env "cert_dir" "/etc/nginx/certs/" }}

ssl_session_cache   shared:SSL:10m;
ssl_session_timeout 10m;

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
}
map $http_x_forwarded_host $proxy_x_forwarded_host {
    default $http_x_forwarded_host;
    '' $http_host;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
    default $http_x_forwarded_port;
    '' $server_port;
}
# If the request from the downstream client has an "Upgrade:" header (set to any
# non-empty value), pass "Connection: upgrade" to the upstream (backend) server.
# Otherwise, the value for the "Connection" header depends on whether the user
# has enabled keepalive to the upstream server.
map $http_upgrade $proxy_connection {
    default upgrade;
    '' $proxy_connection_noupgrade;
}
map $upstream_keepalive $proxy_connection_noupgrade {
    # Preserve nginx's default behavior (send "Connection: close").
    default close;
    # Use an empty string to cancel nginx's default behavior.
    true '';
}
# Abuse the map directive (see <https://stackoverflow.com/q/14433309>) to ensure
# that $upstream_keepalive is always defined.  This is necessary because:
#   - The $proxy_connection variable is indirectly derived from
#     $upstream_keepalive, so $upstream_keepalive must be defined whenever
#     $proxy_connection is resolved.
#   - The $proxy_connection variable is used in a proxy_set_header directive in
#     the http block, so it is always fully resolved for every request -- even
#     those where proxy_pass is not used (e.g., unknown virtual host).
map "" $upstream_keepalive {
    # The value here should not matter because it should always be overridden in
    # a location block (see the "location" template) for all requests where the
    # value actually matters.
    default false;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
proxy_set_header X-Original-URI $request_uri;
# proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";

{{range $key, $obj := .Hosts}}
{{- if or (ne $obj.SocketPath "") (ne $obj.Name "") }}
{{- $cert_dir := $func.MapIndex $obj.Config "cert_dir" $cert_dir }}
# {{ $key }}/
upstream {{ $key }} {
    {{- if ne $obj.SocketPath "" }}
    server unix:{{ $obj.SocketPath }};
    {{- else }}
    server {{ $obj.Name }}
    {{- end }}
}

server {
    server_name {{ $key }};
    http2 on;
    # access_log /var/log/nginx/access.log vhost;
    listen {{ $http_listen_address }} ;
    {{- if and (ne $https_listen_address "") ($func.FileExists (print $cert_dir "/" $key ".crt")) }}
    listen {{ $https_listen_address }} ssl ;
    keepalive_timeout   70;
    ssl_certificate     {{ (print $cert_dir "/" $key ".crt") }} ;
    ssl_certificate_key {{  (print $cert_dir "/" $key ".key") }} ;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    {{ end }}

    {{- if or (ne (index $env "allow_unlimited_body") "") (ne (index $obj.Config "allow_unlimited_body") "") }}
    client_max_body_size 0;
    {{- end }}
    {{- if ne (index $env "server") "" }}
    {{ $env.server }}
    {{- end }}
    {{- if ne (index $obj.Config "server") "" }}
    {{ $obj.Config.server }}
    {{- end }}
    location / {
        {{- if ne (index $env "location") "" }}
        {{ $env.location }}
        {{- end }}
        {{- if ne (index $obj.Config "location") "" }}
        {{ $obj.Config.location }}
        {{- end }}
        {{- if eq (index $obj.Config "mode") "grpcs" }}
        grpc_pass grpcs://{{ $key }};
        {{- else if eq (index $obj.Config "mode") "grpc" }}
        grpc_pass grpc://{{ $key }};
        {{- else }}
        proxy_pass http://{{ $key }};
        {{- end }}
        set $upstream_keepalive false;
    }
}


{{- end }}
{{- end }}

server {
    listen {{ $http_listen_address }} default_server;
    {{- if and (ne $https_listen_address "") ($func.FileExists (print $cert_dir "/default.crt")) }}
    listen {{ $https_listen_address }} ssl default_server;
    ssl_certificate     {{ (print $cert_dir "/default.crt") }} ;
    ssl_certificate_key {{  (print $cert_dir "/default.key") }} ;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    {{- end }}
    return 404;
}
